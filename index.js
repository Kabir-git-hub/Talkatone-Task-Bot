require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');
const creds = require('./credentials.json');


const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WORK_SHEET_ID = process.env.WORK_SHEET_ID;
const STATS_SHEET_ID = process.env.STATS_SHEET_ID;
const PORT = process.env.PORT || 3000;
const SERVER_URL = process.env.SERVER_URL;
const ADMIN_ID = process.env.ADMIN_USER_ID; 
const WORK_SHEET_NAME = "Sheet1"; 


const app = express();
app.use(express.json());
const bot = new TelegramBot(TOKEN);
const webhookUrl = `${SERVER_URL}/bot${TOKEN}`;
bot.setWebHook(webhookUrl);


const serviceAccountAuth = new JWT({
    email: creds.client_email,
    key: creds.private_key.replace(/\\n/g, '\n'),
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});



const userStates = {};
let workSheetCache = [];
let lastCacheTime = 0;
let userStatsCache = [];
let lastStatsCacheTime = 0;
let statsCache = { x: 0, y: 0 };
let isUpdatingSheet = false;
const CACHE_DURATION = 30 * 1000;





async function getWorkSheetRows(forceRefresh = false) {
    const now = Date.now();
    if (forceRefresh || (now - lastCacheTime > CACHE_DURATION) || workSheetCache.length === 0) {
        try {
            console.log("Refreshing cache from Google Sheets...");
            const doc = new GoogleSpreadsheet(WORK_SHEET_ID, serviceAccountAuth);
            await doc.loadInfo();
            const sheet = doc.sheetsByTitle["Sheet1"];
            const statsTab = doc.sheetsByTitle["Stats"];

            if (sheet && statsTab) {
                await sheet.loadHeaderRow();
                workSheetCache = await sheet.getRows();
                
                await statsTab.loadCells('A2:B2');
                const cellX = statsTab.getCell(1, 0);
                const cellY = statsTab.getCell(1, 1);
                statsCache = { x: cellX.value || 0, y: cellY.value || 0 };

                lastCacheTime = now;
                console.log(`Cache updated: ${workSheetCache.length} tasks, Stats (x/y): ${statsCache.x}/${statsCache.y}`);
            } else {
                console.error("'Sheet1' or 'Stats' tab not found.");
                return workSheetCache; 
            }
        } catch (error) {
            console.error("Error refreshing cache:", error);
            return workSheetCache; 
        }
    }
    return workSheetCache;
}



async function getUserStatsRows(forceRefresh = false) {
    const now = Date.now();
    if (forceRefresh || (now - lastStatsCacheTime > CACHE_DURATION) || userStatsCache.length === 0) {
        try {
            console.log("Refreshing User Stats cache...");
            const doc = new GoogleSpreadsheet(STATS_SHEET_ID, serviceAccountAuth);
            await doc.loadInfo();
            const sheet = doc.sheetsByIndex[0];
            await sheet.loadHeaderRow();
            userStatsCache = await sheet.getRows();
            lastStatsCacheTime = now;
            console.log(`User Stats cache updated with ${userStatsCache.length} rows.`);
        } catch (error) {
            console.error("Error refreshing User Stats cache:", error);
            return userStatsCache;
        }
    }
    return userStatsCache;
}


async function getUserStatsSheet() {
    const doc = new GoogleSpreadsheet(STATS_SHEET_ID, serviceAccountAuth);
    await doc.loadInfo();
    const sheet = doc.sheetsByIndex[0];
    await sheet.loadHeaderRow();
    return sheet;
}


app.post(`/bot${TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

bot.on('message', (msg) => handleCommand(msg, msg.text));
bot.on('callback_query', (callbackQuery) => {
    bot.answerCallbackQuery(callbackQuery.id);
    handleCommand(callbackQuery.message, callbackQuery.data, callbackQuery.from.id, callbackQuery.message.message_id);
});


async function handleCommand(msg, command, fromId, messageId) {
    const chatId = msg.chat.id;
    const userId = fromId || msg.from.id;

    try {
        
        let user = userStates[userId]?.user;
        if (!user) {
            user = await findUser(userId);
            if (user) {
                if (!userStates[userId]) userStates[userId] = {};
                userStates[userId].user = user;
            }
        }


        if (!user) {
            if (command && command.trim().length > 2 && !command.startsWith('/')) {
                await registerUser(userId, command.trim());
                
                bot.sendMessage(chatId, `‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶® ${command.trim()}! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`);
            } else {
                bot.sendMessage(chatId, "‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§");
            }
            return; 
        }

        
        if (String(userId) === String(ADMIN_ID)) {
           

            
            if (command === '/clearcache') {
               
                workSheetCache = [];
                userStatsCache = [];
                Object.keys(userStates).forEach(key => delete userStates[key]); // ‡¶∏‡¶¨ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßá‡¶∂‡¶® ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
                lastCacheTime = 0;
                lastStatsCacheTime = 0;
                console.log("All caches cleared by admin command.");
                bot.sendMessage(chatId, "‚úÖ ‡¶∏‡¶¨ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§");
                return;
            }
        }


        
        if (String(userId) === String(ADMIN_ID)) {
            if (command === '/admin_panel') {
                await showAdminPanel(chatId);
                return;
            }
            if (command.startsWith('/approve_')) {
                const targetUserId = command.split('_')[1];
                await manageUserAccess(chatId, targetUserId, 'yes');
                return;
            }
            if (command.startsWith('/revoke_')) {
                const targetUserId = command.split('_')[1];
                await manageUserAccess(chatId, targetUserId, 'no');
                return;
            }
        }
        
        
        if (user.access !== 'yes') {
            bot.sendMessage(chatId, "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶è‡¶ñ‡¶®‡ßã ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
            return;
        }
        
        
        if (userStates[userId] && userStates[userId].state === 'awaiting_phone') {
            await handlePhoneNumberInput(chatId, user, command, userStates[userId]);
            return;
        }
        
        if (command === '/start') {
            bot.sendMessage(chatId, `‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, ${user.name}! ‡¶ï‡ßÄ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?`, { reply_markup: getMainMenuKeyboard(userId) });
        } else if (command === '/get_task') {
            await handleGetTask(chatId, user);
        } else if (command === '/my_stats') {
            await updateAndShowStats(chatId, user);
        }  else if (command.startsWith('/select_task_')) {
            const taskRow = command.split('_')[2];
            await handleSelectTask(chatId, user, taskRow);
        }  else if (command.startsWith('submit_phone_')) {
            const taskRow = command.split('_')[2];
            if (!userStates[userId]) userStates[userId] = {};
            userStates[userId].state = 'awaiting_phone';
            userStates[userId].row = taskRow;
            userStates[userId].messageId = messageId;
            bot.sendMessage(chatId, "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§");
        } else if (command.startsWith('reject_')) {
            const taskRow = command.split('_')[1];
            const rejectOptionsKeyboard = { inline_keyboard: [ [{ text: "üö´ Account Create Problem", callback_data: `confirm_reject_problem_${taskRow}` }], [{ text: "‚è∞ ‡¶™‡¶∞‡ßá ‡¶ï‡¶∞‡¶¨ (Do Later)", callback_data: `confirm_reject_later_${taskRow}` }], [{ text: "‚Ü©Ô∏è  ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶® (Back) ", callback_data: `back_to_task_${taskRow}`}] ] };
            bot.editMessageText("‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßá‡¶® ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?", { chat_id: chatId, message_id: messageId, reply_markup: rejectOptionsKeyboard });
        } else if (command.startsWith("confirm_reject_")) {
            const parts = command.split("_");
            const reason = parts[2];
            const taskRow = parts[3];
            const confirmationKeyboard = { inline_keyboard: [ [{ text: "‚úÖ ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å (Yes)", callback_data: `final_reject_${reason}_${taskRow}` }], [{ text: "‚ùå ‡¶®‡¶æ (No)", callback_data: `back_to_task_${taskRow}` }] ] };
            bot.editMessageText("‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§?", { chat_id: chatId, message_id: messageId, reply_markup: confirmationKeyboard });
        } else if (command.startsWith("final_reject_")) {
            const parts = command.split("_");
            const reason = parts[2];
            const taskRow = parts[3];
            await handleRejectTask(chatId, user, taskRow, reason, messageId);
        } else if (command.startsWith("back_to_task_")) {
            const taskRow = command.split("_")[3];
            await handleBackToTask(chatId, taskRow, messageId);
        }

    } catch (error) {
        console.error(`Error in handleCommand: ${error.toString()} \nStack: ${error.stack}`);
        bot.sendMessage(chatId, "‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
    }
}



async function showAdminPanel(chatId) {
    
    const rows = await getUserStatsRows();

    if (rows.length === 0) {
        bot.sendMessage(chatId, "‡¶ï‡ßã‡¶®‡ßã ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶®‡ßá‡¶á‡•§");
        return;
    }

    let message = "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:\n\n";
    const keyboard = [];

    rows.forEach(row => {
        const name = row.get('UserName');
        const id = row.get('UserID');
        const access = row.get('Access');
        const statusIcon = (access === 'yes') ? '‚úÖ' : '‚ùå';
        
        message += `${statusIcon} ${name} - \`${id}\`\n`;
        
        keyboard.push([
            { text: `Approve ${name}`, callback_data: `/approve_${id}` },
            { text: `Revoke ${name}`, callback_data: `/revoke_${id}` }
        ]);
    });

    bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    });
}


async function manageUserAccess(adminChatId, targetUserId, accessStatus) {
    try {
        const rows = await getUserStatsRows();
        const userRow = rows.find(row => String(row.get('UserID')) === String(targetUserId));

        if (userRow) {
            userRow.set('Access', accessStatus);
            await userRow.save();
            await getUserStatsRows(true); 

           
            if (userStates[targetUserId] && userStates[targetUserId].user) {
                userStates[targetUserId].user.access = accessStatus;
                console.log(`Session cache updated for user ${targetUserId}. New access: ${accessStatus}`);
            }
            

            const userName = userRow.get('UserName');
            bot.sendMessage(adminChatId, `"${userName}"-‡¶è‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ "${accessStatus}" ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`);
            
            if (accessStatus === 'yes') {
                bot.sendMessage(targetUserId, "‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§", { reply_markup: getMainMenuKeyboard(targetUserId) });
            } else {
                bot.sendMessage(targetUserId, "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶∏‡ßç‡¶•‡¶ó‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§");
            }

            await showAdminPanel(adminChatId);
        } else {
            bot.sendMessage(adminChatId, `‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ${targetUserId} ID ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶®‡ßá‡¶á‡•§`);
        }
    } catch (error) {
        console.error("Error managing user access:", error);
        bot.sendMessage(adminChatId, "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§");
    }
}



// ------ ‡¶®‡¶§‡ßÅ‡¶®: ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶ï‡¶æ‡¶ú ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßÇ‡ßú‡¶æ‡¶®‡ßç‡¶§ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ------
async function handleSelectTask(chatId, user, taskRow) {
    if (isUpdatingSheet) {
        bot.sendMessage(chatId, "‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡¶ü‡¶ø ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∏‡ßç‡¶§ ‡¶Ü‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ï‡ßü‡ßá‡¶ï ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
        return;
    }
    isUpdatingSheet = true;

    // ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø‡¶ü‡¶ø ‡¶™‡ßú‡¶æ
    const messageIdToEdit = userStates[user.id]?.taskListMessageId;

    try {
        const rows = await getWorkSheetRows(true);
        const task = rows.find(r => r.rowNumber == taskRow);

        if (task && task.get('Status') === 'Available') {
            await task.set('Status', 'Assigned');
            await task.set('AssignedTo', user.name);
            await task.save();
            await getWorkSheetRows(true);

            const stats = statsCache;
            const title = `‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶æ‡¶ú (${stats.x}/${stats.y})`;
            const message = `<b>${title}</b>\n\n` +
                            `<b>Email: </b> <code>${task.get('Email')}</code>\n` +
                            `<b>Password: </b> <code>${task.get('Password')}</code>\n` +
                            `<b>Recovery Mail:</b> <code>${task.get('Recovery Mail')}</code>\n\n` +
                            `‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§`;
            
            const keyboard = { inline_keyboard: [[{ text: "‚úÖ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®", callback_data: `submit_phone_${taskRow}` }], [{ text: "‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶® (Reject)", callback_data: `reject_${taskRow}` }]] };

            // --- ‡¶Æ‡ßÇ‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®: ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø‡¶ï‡ßá‡¶á ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ ‡¶¶‡¶ø‡ßü‡ßá ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ---
            if (messageIdToEdit) {
                bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageIdToEdit,
                    parse_mode: 'HTML',
                    reply_markup: keyboard
                });
            } else {
                // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
                bot.sendMessage(chatId, message, { parse_mode: 'HTML', reply_markup: keyboard });
            }
            // -------------------------------------------------------------------------

        } else {
            if (messageIdToEdit) {
                bot.editMessageText("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßá‡¶â ‡¶®‡¶ø‡ßü‡ßá ‡¶®‡¶ø‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶æ‡¶ú ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®‡•§", {
                    chat_id: chatId,
                    message_id: messageIdToEdit,
                    reply_markup: { inline_keyboard: [] } // ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ
                });
            }
            await handleGetTask(chatId, user); // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
        }

    } catch (error) {
        console.error("Error during task selection:", error);
        bot.sendMessage(chatId, "‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§");
    } finally {
        isUpdatingSheet = false;
    }
}



async function handlePhoneNumberInput(chatId, user, phoneNumber, stateData) {
    const trimmedPhoneNumber = phoneNumber.trim();
    
   
    const phoneRegex = /^\(\d{3}\)\s\d{3}-\d{4}$/; 

    if (!phoneRegex.test(trimmedPhoneNumber)) {
        bot.sendMessage(chatId, "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶á‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®...‡•§");
        return; 
    }
    // --------------------------------------------------------------------

    const { row, messageId } = stateData;
    const rows = await getWorkSheetRows();
    const task = rows.find(r => r.rowNumber == row);

    if (task && task.get('AssignedTo') === user.name && task.get('Status') === "Assigned") {
        task.set('PhoneNumber', trimmedPhoneNumber);
        task.set('Status', "Completed");
        await task.save();
        await getWorkSheetRows(true);
        
        await updateUserStats(user, 1);
        
      
        delete userStates[user.id];
        
        const taskDetails = `<b>‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá (‡¶∏‡¶æ‡¶∞‡¶ø ${row}):</b>\n\n`+
                            `<b>Email:</b> <code>${task.get('Email')}</code>\n`+
                            `<b>Password:</b> <code>${task.get('Password')}</code>\n`+
                            `<b>Recovery Mail:</b> <code>${task.get('Recovery Mail')}</code>\n\n`+
                            `<b>‡¶ú‡¶Æ‡¶æ‡¶ï‡ßÉ‡¶§ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞:</b> <code>${trimmedPhoneNumber}</code>`;

        if (messageId) {
            bot.editMessageText(taskDetails, { chat_id: chatId, message_id: messageId, parse_mode: 'HTML', reply_markup: {} });
        }
        bot.sendMessage(chatId, `‚úÖ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`, { reply_markup: getMainMenuKeyboard(user.id) });
    } else {
        
        delete userStates[user.id];
        bot.sendMessage(chatId, "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", { reply_markup: getMainMenuKeyboard(user.id) });
    }
}

async function handleRejectTask(chatId, user, rowToReject, reason, messageId) {
    const rows = await getWorkSheetRows();
    const task = rows.find(r => r.rowNumber == rowToReject);

    if (task && task.get('Status') === "Assigned" && task.get('AssignedTo') === user.name) {
        let responseText = "";
        if (reason === "problem") {
            task.set('Status', "Rejected");
            await task.save();
            await getWorkSheetRows(true); 
            responseText = `‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø (‡¶∏‡¶æ‡¶∞‡¶ø ${rowToReject}) ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`;
        } else if (reason === "later") {
            task.set('Status', "Available");
            task.set('AssignedTo', "");
            await task.save();
            await getWorkSheetRows(true); 
            responseText = `‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`;
        }
        
        if (messageId) {
            bot.editMessageText(responseText, { chat_id: chatId, message_id: messageId, reply_markup: {} });
        }
        bot.sendMessage(chatId, "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡•§", { reply_markup: getMainMenuKeyboard() });
    } else {
        if (messageId) bot.editMessageText("‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡ßü‡•§", { chat_id: chatId, message_id: messageId });
    }
}


async function handleBackToTask(chatId, taskRow, messageId) {
    const rows = await getWorkSheetRows();
    
    const task = rows.find(r => r.rowNumber == taskRow);

    if (task) {
        const message = `<b>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶æ‡¶ú</b>\n\n` +
                        `<b>Email: </b> <code>${task.get('Email')}</code>\n` +
                        `<b>Password: </b> <code>${task.get('Password')}</code>\n` +
                        `<b>Recovery Mail:</b> <code>${task.get('Recovery Mail')}</code>\n\n` +
                        `‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§`;
        const originalKeyboard = { 
            inline_keyboard: [ 
                [{ text: "‚úÖ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®", callback_data: `submit_phone_${taskRow}` }], 
                [{ text: "‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶® (Reject)", callback_data: `reject_${taskRow}` }] 
            ] 
        };
        bot.editMessageText(message, { chat_id: chatId, message_id: messageId, parse_mode: 'HTML', reply_markup: originalKeyboard });
    }
}



async function findUser(userId) {
    const rows = await getUserStatsRows(); 
    const userRow = rows.find(row => String(row.get('UserID')) === String(userId));
    if (userRow) {
        return {
            row: userRow.rowNumber,
            id: userRow.get('UserID'),
            name: userRow.get('UserName'),
            total: parseInt(userRow.get('TotalCompleted')) || 0,
            daily: parseInt(userRow.get('DailyCompleted')) || 0,
            date: userRow.get('LastCompletedDate'),
            access: userRow.get('Access') ? userRow.get('Access').toLowerCase() : 'no'
        };
    }
    return null;
}

async function registerUser(userId, userName) {
    const userStatsSheet = await getUserStatsSheet(); 
    
    await userStatsSheet.addRow({
        UserID: userId,
        UserName: userName,
        TotalCompleted: 0,
        DailyCompleted: 0,
        LastCompletedDate: "",
        Access: "no"
    });
    
    await getUserStatsRows(true); 
    
    if (ADMIN_ID) {
        const adminMessage = `‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ: ${userName} (\`${userId}\`)\n\n‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶® ‡¶¶‡¶ø‡¶§‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`;
        bot.sendMessage(ADMIN_ID, adminMessage, { 
            parse_mode: 'Markdown', 
            reply_markup: { 
                inline_keyboard: [[{ text: "‚öôÔ∏è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ñ‡ßÅ‡¶≤‡ßÅ‡¶®", callback_data: "/admin_panel" }]] 
            } 
        });
    }
}


async function updateUserStats(user, count) {
    
    const rows = await getUserStatsRows();
    
    const userRow = rows.find(r => r.rowNumber == user.row);

    if (userRow) {
        const today = new Date();
        const todayStr = today.toISOString().split('T')[0];
        const lastDateStr = user.date ? new Date(user.date).toISOString().split('T')[0] : null;

        let dailyCount = parseInt(userRow.get('DailyCompleted')) || 0;
        if (todayStr === lastDateStr) {
            dailyCount += count;
        } else {
            dailyCount = count;
        }

        userRow.set('TotalCompleted', (parseInt(userRow.get('TotalCompleted')) || 0) + count);
        userRow.set('DailyCompleted', dailyCount);
        userRow.set('LastCompletedDate', today.toLocaleDateString('en-CA'));
        await userRow.save();
        await getUserStatsRows(true);
        console.log(`User Stats cache refreshed after updating stats for: ${user.name}`);
    }
}

async function updateAndShowStats(chatId, user) {
    const latestUserInfo = await findUser(user.id);
    if (latestUserInfo) {
        const todaysCount = getTodaysCount(latestUserInfo);
        const statsMessage = `üìä *‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨, ${latestUserInfo.name}*\n\n- ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶æ‡¶ú: ${todaysCount}\n- ‡¶Æ‡ßã‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶æ‡¶ú: ${latestUserInfo.total}`;
        bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown', reply_markup: getMainMenuKeyboard() });
    } else {
        bot.sendMessage(chatId, "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§");
    }
}

function getTodaysCount(user) {
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    if (!user.date) return 0;
    const lastDateStr = new Date(user.date).toISOString().split('T')[0];
    return todayStr === lastDateStr ? user.daily : 0;
}

function getMainMenuKeyboard(userId) {
    const defaultKeyboard = [
        [{ text: "‚úÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶æ‡¶ú ‡¶®‡¶ø‡¶® (Get Task)", callback_data: "/get_task" }],
        [{ text: "üìä ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ (My Stats)", callback_data: "/my_stats" }]
    ];

   
    if (String(userId) === String(ADMIN_ID)) {
        defaultKeyboard.push([{ text: "‚öôÔ∏è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤", callback_data: "/admin_panel" }]);
    }

    return { inline_keyboard: defaultKeyboard };
}


// ------ ‡ßÆ. ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ------
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
