// ======================================================================
//          ржмржЯрзЗрж░ ржЪрзВрзЬрж╛ржирзНржд ржПржмржВ ржЕржкржЯрж┐ржорж╛ржЗржЬржб ржХрзЛржб (Node.js for Render)
// ======================================================================

// ------ рзз. рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржЗржорзНржкрзЛрж░рзНржЯ ------
require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');

// ------ рзи. ржЖржкржирж╛рж░ рждржерзНржп ржПржмржВ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ------
const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WORK_SHEET_ID = process.env.WORK_SHEET_ID;
const STATS_SHEET_ID = process.env.STATS_SHEET_ID;
const FINAL_SHEET_ID = process.env.FINAL_SHEET_ID;
const PORT = process.env.PORT || 3000;
const SERVER_URL = process.env.SERVER_URL; // Render ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ URL

// рж╕рж╛рж░рзНржнрж┐рж╕ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗрж░ JSON ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рж╛
const creds = require('./credentials.json');

// ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ ржПржмржВ ржУрзЯрзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж╛рж▓рзБ ржХрж░рж╛
const bot = new TelegramBot(TOKEN);
const app = express();
app.use(express.json()); // ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржерзЗржХрзЗ ржЖрж╕рж╛ JSON ржбрзЗржЯрж╛ ржкрж╛рж░рзНрж╕ ржХрж░рж╛рж░ ржЬржирзНржп

// Webhook рж╕рзЗржЯ ржХрж░рж╛
const webhookUrl = `${SERVER_URL}/bot${TOKEN}`;
bot.setWebHook(webhookUrl);

// ------ рзй. ржЧрзБржЧрж▓ рж╢рзАржЯ ржХрж╛ржирзЗржХрж╢ржи (рж╕ржарж┐ржХ V4 рж╕рж┐ржиржЯрзНржпрж╛ржХрзНрж╕) ------

// рж╕рж╛рж░рзНржнрж┐рж╕ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЕржерзЗржирзНржЯрж┐ржХрзЗрж╢ржи ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ рждрзИрж░рж┐ ржХрж░рж╛
const serviceAccountAuth = new JWT({
    email: creds.client_email,
    key: creds.private_key.replace(/\\n/g, '\n'), // Render-ржПрж░ ржЬржирзНржп ржХрзА (key) ржлрж░ржорзНржпрж╛ржЯ ржарж┐ржХ ржХрж░рж╛
    scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
    ],
});

// ржЧрзБржЧрж▓ рж╢рзАржЯ ржбржХрзБржорзЗржирзНржЯржЧрзБрж▓рзЛ рж▓рзЛржб ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
async function getSheets() {
    const workDoc = new GoogleSpreadsheet(WORK_SHEET_ID, serviceAccountAuth);
    await workDoc.loadInfo();
    const workSheet = workDoc.sheetsByIndex[0];

    const statsDoc = new GoogleSpreadsheet(STATS_SHEET_ID, serviceAccountAuth);
    await statsDoc.loadInfo();
    const statsSheet = statsDoc.sheetsByIndex[0];

    const finalDoc = new GoogleSpreadsheet(FINAL_SHEET_ID, serviceAccountAuth);
    await finalDoc.loadInfo();
    const finalSheet = finalDoc.sheetsByIndex[0];
    
    return { workSheet, statsSheet, finalSheet };
}


// ржЗржЙржЬрж╛рж░ рж╕рзНржЯрзЗржЯ (state) рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛рж░ ржЬржирзНржп (PropertiesService-ржПрж░ ржмрж┐ржХрж▓рзНржк)
const userStates = {}; 

// ------ рзк. Webhook рж░рж┐рж╕рж┐ржн ржХрж░рж╛рж░ ржорзВрж▓ ржлрж╛ржВрж╢ржи (doPost-ржПрж░ ржмрж┐ржХрж▓рзНржк) ------
app.post(`/bot${TOKEN}`, async (req, res) => {
    try {
        bot.processUpdate(req.body);
    } catch (error) {
        console.error('Error processing update:', error);
    }
    res.sendStatus(200); // ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржоржХрзЗ ржЬрж╛ржирж╛ржирзЛ ржпрзЗ ржЖржорж░рж╛ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржкрзЗрзЯрзЗржЫрж┐
});

// ------ рзл. ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржорзЗрж░ рж╕ржм рж░ржХржо ржЗржиржкрзБржЯ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ ------

// "/start" ржПржмржВ ржорзЗржирзБ ржмрж╛ржЯржиржЧрзБрж▓рзЛрж░ ржЬржирзНржп
bot.on('callback_query', (callbackQuery) => {
    const msg = callbackQuery.message;
    const data = callbackQuery.data;

    // Command-ржПрж░ ржорждрзЛ ржХрж╛ржЬ ржХрж░рж╛ржирзЛрж░ ржЬржирзНржп
    if (data.startsWith('/')) {
        handleTextMessage(msg, { text: data });
    } else {
        handleCallbackQuery(callbackQuery);
    }
});

bot.on('message', (msg) => {
    handleTextMessage(msg, msg);
});

// ржорзВрж▓ рж▓ржЬрж┐ржХ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
async function handleTextMessage(msg, command) {
    const chatId = msg.chat.id;
    const userId = msg.chat.id; // In a 1-on-1 chat, chatId and userId are the same
    const text = command.text;

    try {
        const user = await findUser(userId);

        // --- рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ---
        if (!user) {
            if (text && text.trim().length > 2 && text.trim().length < 30 && !text.startsWith('/')) {
                await registerUser(userId, text.trim());
                bot.sendMessage(chatId, `ржЕржнрж┐ржиржирзНржжржи ${text.trim()}! ржЖржкржирж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи рж╕ржорзНржкржирзНржи рж╣рзЯрзЗржЫрзЗред`, { reply_markup: getMainMenuKeyboard() });
            } else {
                bot.sendMessage(chatId, "рж╕рзНржмрж╛ржЧрждржо! ржмржЯржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп, ржжрзЯрж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржирж╛ржо рж▓рж┐ржЦрзЗ ржкрж╛ржарж╛ржиред");
            }
            return;
        }

        // --- рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░рзНржб ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржжрзЗрж░ ржЬржирзНржп ржмрж╛ржХрж┐ ржХрж╛ржЬ ---
        if (userStates[userId] && userStates[userId].state === 'awaiting_phone') {
            await handlePhoneNumberInput(chatId, user, text, userStates[userId]);
            return;
        }

        if (text === '/start') {
            bot.sendMessage(chatId, `рж╕рзНржмрж╛ржЧрждржо, ${user.name}! ржХрзА ржХрж░рждрзЗ ржЪрж╛ржи?`, { reply_markup: getMainMenuKeyboard() });
        } else if (text === '/get_task') {
            await handleGetTask(chatId, user);
        } else if (text === '/my_stats') {
            await updateAndShowStats(chatId, user);
        } else if (!text.startsWith('/')) {
             bot.sendMessage(chatId, "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржиржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред");
        }

    } catch (error) {
        console.error(`Error in handleTextMessage: ${error}`);
        bot.sendMessage(chatId, "ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред");
    }
}

// ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
async function handleCallbackQuery(callbackQuery) {
    const message = callbackQuery.message;
    const chatId = message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;
    const messageId = message.message_id;

    try {
        const user = await findUser(userId);
        if (!user) {
            bot.answerCallbackQuery(callbackQuery.id, { text: 'ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░ ржХрж░рзБржиред' });
            return;
        }

        if (data.startsWith('submit_phone_')) {
            const taskRow = data.split('_')[2];
            userStates[userId] = { state: 'awaiting_phone', row: taskRow, messageId: messageId };
            bot.sendMessage(chatId, "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржлрзЛржи ржиржорзНржмрж░ржЯрж┐ ржкрж╛ржарж╛ржиред");
            bot.answerCallbackQuery(callbackQuery.id);
        } 
        else if (data.startsWith("reject_")) {
            const taskRow = data.split('_')[1];
            const rejectOptionsKeyboard = { inline_keyboard: [ [{ text: "ЁЯЪл Account Create Problem", callback_data: `confirm_reject_problem_${taskRow}` }], [{ text: "тП░ ржкрж░рзЗ ржХрж░ржм (Do Later)", callback_data: `confirm_reject_later_${taskRow}` }], [{ text: "тЖйя╕П  (Back) ", callback_data: `back_to_task_${taskRow}`}] ] };
            bot.editMessageText("ржЖржкржирж┐ ржХрзЗржи ржХрж╛ржЬржЯрж┐ ржмрж╛рждрж┐рж▓ ржХрж░рждрзЗ ржЪрж╛ржи?", { chat_id: chatId, message_id: messageId, reply_markup: rejectOptionsKeyboard });
        }
        else if (data.startsWith("confirm_reject_")) {
            const parts = data.split("_");
            const reason = parts[2];
            const taskRow = parts[3];
            const confirmationKeyboard = { inline_keyboard: [ [{ text: "тЬЕ рж╣рзНржпрж╛ржБ (Yes)", callback_data: `final_reject_${reason}_${taskRow}` }], [{ text: "тЭМ ржирж╛ (No)", callback_data: `back_to_task_${taskRow}` }] ] };
            bot.editMessageText("ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд?", { chat_id: chatId, message_id: messageId, reply_markup: confirmationKeyboard });
        }
        else if (data.startsWith("final_reject_")) {
            const parts = data.split("_");
            const reason = parts[2];
            const taskRow = parts[3];
            await handleRejectTask(chatId, user, taskRow, reason, messageId);
        }
        else if (data.startsWith("back_to_task_")) {
            const taskRow = data.split("_")[3];
            const { workSheet } = await getSheets();
            const rows = await workSheet.getRows();
            const task = rows[parseInt(taskRow) - 2]; // 0-indexed and header row

            const message = `<b>ржЖржкржирж╛рж░ ржирждрзБржи ржХрж╛ржЬ (Row ${taskRow}):</b>\n\n<b>Email:</b> <code>${task.Email}</code>\n<b>Password:</b> <code>${task.Password}</code>\n<b>Recovery Mail:</b> <code>${task.Recovery}</code>\n\nржХрж╛ржЬржЯрж┐ рж╢рзЗрж╖ ржХрж░рзЗ Talkatone ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ ржлрзЛржи ржиржорзНржмрж░ржЯрж┐ ржПржЦрж╛ржирзЗ ржкрж╛ржарж╛ржиред\nржХрж╛ржЬржЯрж┐ ржХрж░рждрзЗ ржирж╛ ржкрж╛рж░рж▓рзЗ 'ржмрж╛рждрж┐рж▓ ржХрж░рзБржи' ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред`;
            const originalKeyboard = { inline_keyboard: [ [{ text: "тЬЕ ржлрзЛржи ржиржорзНржмрж░ ржЬржорж╛ ржжрж┐ржи", callback_data: `submit_phone_${taskRow}` }], [{ text: "тЭМ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи (Reject)", callback_data: `reject_${taskRow}` }] ] };
            bot.editMessageText(message, { chat_id: chatId, message_id: messageId, reply_markup: originalKeyboard, parse_mode: 'HTML' });
        }
        
        bot.answerCallbackQuery(callbackQuery.id); // ржЗржЙржЬрж╛рж░ржХрзЗ ржЬрж╛ржирж╛ржирзЛ ржпрзЗ ржХрзНрж▓рж┐ржХ ржХрж╛ржЬ ржХрж░рзЗржЫрзЗ

    } catch (error) {
        console.error(`Error in handleCallbackQuery: ${error}`);
        bot.answerCallbackQuery(callbackQuery.id, { text: 'ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред' });
    }
}


// ------ рзм. ржорзВрж▓ ржлрж╛ржВрж╢ржиржЧрзБрж▓рзЛ (Node.js ржлрж░ржорзНржпрж╛ржЯрзЗ) ------

async function handleGetTask(chatId, user) {
    const { workSheet } = await getSheets();
    const rows = await workSheet.getRows();

    // ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржХрж╛ржЫрзЗ ржХрзЛржирзЛ ржЕрж╕ржорж╛ржкрзНржд ржХрж╛ржЬ ржЖржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рж╛
    const existingTask = rows.find(row => row.AssignedTo === user.name && row.Status === 'Assigned');
    if (existingTask) {
        bot.sendMessage(chatId, "ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржЗрждрж┐ржоржзрзНржпрзЗ ржПржХржЯрж┐ ржХрж╛ржЬ ржЕрж╕ржорж╛ржкрзНржд рж░рзЯрзЗржЫрзЗред");
        return;
    }

    // ржирждрзБржи ржХрж╛ржЬ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛
    const availableTask = rows.find(row => row.Status === 'Available');
    if (availableTask) {
        availableTask.Status = 'Assigned';
        availableTask.AssignedTo = user.name;
        await availableTask.save(); // рж╢рзАржЯрзЗ ржкрж░рж┐ржмрж░рзНрждржи рж╕рзЗржн ржХрж░рж╛

        const taskRow = availableTask.rowIndex;
        const message = `<b>ржЖржкржирж╛рж░ ржирждрзБржи ржХрж╛ржЬ</b>\n\n` +
                        `<b>Email: </b> <code>${availableTask.Email}</code>\n` +
                        `<b>Password: </b> <code>${availableTask.Password}</code>\n` +
                        `<b>Recovery Mail:</b> <code>${availableTask.Recovery}</code>\n\n` +
                        `ржХрж╛ржЬржЯрж┐ рж╢рзЗрж╖ ржХрж░рзЗ Talkatone ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ ржлрзЛржи ржиржорзНржмрж░ржЯрж┐ ржПржЦрж╛ржирзЗ ржкрж╛ржарж╛ржиред\n` +
                        `ржХрж╛ржЬржЯрж┐ ржХрж░рждрзЗ ржирж╛ ржкрж╛рж░рж▓рзЗ 'ржмрж╛рждрж┐рж▓ ржХрж░рзБржи' ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред`;
        
        const keyboard = { inline_keyboard: [[{ text: "тЬЕ ржлрзЛржи ржиржорзНржмрж░ ржЬржорж╛ ржжрж┐ржи", callback_data: `submit_phone_${taskRow}` }], [{ text: "тЭМ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи (Reject)", callback_data: `reject_${taskRow}` }]] };
        bot.sendMessage(chatId, message, { parse_mode: 'HTML', reply_markup: keyboard });
    } else {
        bot.sendMessage(chatId, "ржжрзБржГржЦрж┐ржд, ржПржЗ ржорзБрж╣рзВрж░рзНрждрзЗ ржХрзЛржирзЛ ржирждрзБржи ржХрж╛ржЬ ржирзЗржЗред");
    }
}

async function handlePhoneNumberInput(chatId, user, phoneNumber, stateData) {
    const trimmedPhoneNumber = phoneNumber.trim();
    const phoneRegex = /^\(\d{3}\)\s\d{3}-\d{4}$/;

    if (!phoneRegex.test(trimmedPhoneNumber)) {
        bot.sendMessage(chatId, "ржжрзБржГржЦрж┐ржд, ржлрзЛржи ржиржорзНржмрж░ржЯрж┐ рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯрзЗ ржирзЗржЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ `(123) 456-7890` ржПржЗ ржлрж░ржорзНржпрж╛ржЯрзЗ ржЖржмрж╛рж░ ржкрж╛ржарж╛ржиред");
        return;
    }

    const { row, messageId } = stateData;
    const taskRow = parseInt(row);

    const { workSheet, finalSheet } = await getSheets();
    const rows = await workSheet.getRows();
    const task = rows[taskRow - 2]; // 0-indexed and header row

    if (task && task.AssignedTo === user.name && task.Status === "Assigned") {
        task.Phone = trimmedPhoneNumber;
        task.Status = "Completed";
        await task.save();

        // Final Sheet ржЖржкржбрзЗржЯ ржХрж░рж╛
        await updateFinalSheetOnSuccess(task.Email, task.Password, trimmedPhoneNumber);
        
        // Stats ржЖржкржбрзЗржЯ ржХрж░рж╛
        await updateUserStats(user, 1);
        
        delete userStates[user.id];
        
        const taskDetails = `<b>ржХрж╛ржЬржЯрж┐ рж╕ржорзНржкржирзНржи рж╣рзЯрзЗржЫрзЗ (Row ${taskRow}):</b>\n\n<b>Email:</b> <code>${task.Email}</code>\n<b>Password:</b> <code>${task.Password}</code>\n<b>Recovery Mail:</b> <code>${task.Recovery}</code>\n\n<b>ржЬржорж╛ржХрзГржд ржлрзЛржи ржиржорзНржмрж░:</b> <code>${trimmedPhoneNumber}</code>`;
        
        bot.editMessageText(taskDetails, { chat_id: chatId, message_id: messageId, parse_mode: 'HTML', reply_markup: {} });
        bot.sendMessage(chatId, `тЬЕ ржзржирзНржпржмрж╛ржж! ржХрж╛ржЬржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЬржорж╛ рж╣рзЯрзЗржЫрзЗред`, { reply_markup: getMainMenuKeyboard() });
    } else {
        delete userStates[user.id];
        bot.sendMessage(chatId, "ржжрзБржГржЦрж┐ржд, ржПржЗ ржХрж╛ржЬржЯрж┐ ржЬржорж╛ ржжрзЗржУрзЯрж╛рж░ рж╕ржорзЯ ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред", { reply_markup: getMainMenuKeyboard() });
    }
}

async function handleRejectTask(chatId, user, rowToReject, reason, messageId) {
    const taskRow = parseInt(rowToReject);
    const { workSheet } = await getSheets();
    const rows = await workSheet.getRows();
    const task = rows[taskRow - 2]; // 0-indexed and header row

    if (task && task.Status === "Assigned" && task.AssignedTo === user.name) {
        let responseText = "";
        if (reason === "problem") {
            task.Status = "Rejected";
            await task.save();
            // рж░ржЩ ржХрж░рж╛рж░ ржкрж╛рж░рзНржЯржЯрж┐ google-spreadsheet ржжрж┐рзЯрзЗ рж╕рж░рж╛рж╕рж░рж┐ ржХрж░рж╛ ржЬржЯрж┐рж▓, ржПржЯрж┐ ржЖржкрж╛рждржд ржмрж╛ржж ржжрзЗржУрзЯрж╛ рж╣рж▓рзЛ
            responseText = `ржХрж╛ржЬржЯрж┐ (Row ${taskRow}) рж╕ржлрж▓ржнрж╛ржмрзЗ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред`;
        } else if (reason === "later") {
            task.Status = "Available"; // рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗ Available ржХрж░рж╛
            task.AssignedTo = ""; // ржирж╛ржо ржорзБржЫрзЗ ржлрзЗрж▓рж╛
            await task.save();
            responseText = `ржХрж╛ржЬржЯрж┐ ржЖржмрж╛рж░ рждрж╛рж▓рж┐ржХрж╛рж░ рж╢рзБрж░рзБрждрзЗ ржпрзБржХрзНржд ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред`;
        }
        bot.editMessageText(responseText, { chat_id: chatId, message_id: messageId });
        bot.sendMessage(chatId, "ржЖржкржирж╛рж░ ржкрж░ржмрж░рзНрждрзА ржХрж╛ржЬрзЗрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБрждред", { reply_markup: getMainMenuKeyboard() });
    } else {
        bot.editMessageText("ржПржЗ ржХрж╛ржЬржЯрж┐ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╕ржорзНржнржм ржирзЯред", { chat_id: chatId, message_id: messageId });
    }
}


// ------ рзн. ржЧрзБржЧрж▓ рж╢рзАржЯ ржирж┐рзЯрзЗ ржХрж╛ржЬ ржХрж░рж╛рж░ рж╣рзЗрж▓рзНржкрж╛рж░ ржлрж╛ржВрж╢ржи (ржЖржкржбрзЗржЯрзЗржб) ------

async function findUser(userId) {
    const { statsSheet } = await getSheets();
    const rows = await statsSheet.getRows();
    // ржорзВрж▓ ржкрж░рж┐ржмрж░рзНрждржи ржПржЦрж╛ржирзЗ: row.UserID ржПрж░ ржкрж░рж┐ржмрж░рзНрждрзЗ row.get('UserID') ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ
    const userRow = rows.find(row => String(row.get('UserID')) === String(userId));
    
    if (userRow) {
        return {
            row: userRow.rowIndex,
            id: userRow.get('UserID'),
            name: userRow.get('UserName'),
            total: parseInt(userRow.get('TotalCompleted')) || 0,
            daily: parseInt(userRow.get('DailyCompleted')) || 0,
            date: userRow.get('LastCompletedDate')
        };
    }
    return null;
}

async function registerUser(userId, userName) {
    const { statsSheet } = await getSheets();
    await statsSheet.addRow({
        UserID: userId,
        UserName: userName,
        TotalCompleted: 0,
        DailyCompleted: 0,
        LastCompletedDate: ""
    });
}

async function updateUserStats(user, count) {
    const { statsSheet } = await getSheets();
    const rows = await statsSheet.getRows();
    const userRow = rows[user.row - 2]; // 0-indexed and header row

    const today = new Date();
    const todayStr = today.toISOString().split('T')[0]; // "YYYY-MM-DD"
    const lastDateStr = user.date ? new Date(user.date).toISOString().split('T')[0] : null;

    let dailyCount = parseInt(userRow.DailyCompleted) || 0;
    if (todayStr === lastDateStr) {
        dailyCount += count;
    } else {
        dailyCount = count;
    }

    userRow.TotalCompleted = (parseInt(userRow.TotalCompleted) || 0) + count;
    userRow.DailyCompleted = dailyCount;
    userRow.LastCompletedDate = today.toLocaleDateString('en-CA'); // YYYY-MM-DD format
    await userRow.save();
}

async function updateAndShowStats(chatId, user) {
    const latestUserInfo = await findUser(user.id);
    if (latestUserInfo) {
        const todaysCount = getTodaysCount(latestUserInfo);
        const statsMessage = `ЁЯУК *ржЖржкржирж╛рж░ ржХрж╛ржЬрзЗрж░ рж╣рж┐рж╕рж╛ржм, ${latestUserInfo.name}*\n\n- ржЖржЬржХрзЗрж░ рж╕ржорзНржкржирзНржи ржХрж╛ржЬ: ${todaysCount}\n- ржорзЛржЯ рж╕ржорзНржкржирзНржи ржХрж╛ржЬ: ${latestUserInfo.total}`;
        bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown', reply_markup: getMainMenuKeyboard() });
    } else {
        bot.sendMessage(chatId, "ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ рждржерзНржп ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред");
    }
}

function getTodaysCount(user) {
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    if (!user.date) return 0;
    const lastDateStr = new Date(user.date).toISOString().split('T')[0];
    return todayStr === lastDateStr ? user.daily : 0;
}

async function updateFinalSheetOnSuccess(email, password, phoneNumber) {
    const { finalSheet } = await getSheets();
    const rows = await finalSheet.getRows();
    const taskRow = rows.find(row => row.Email === email && row.Password === password);
    if (taskRow) {
        taskRow.PhoneNumber = phoneNumber;
        await taskRow.save();
    }
}


// ------ рзо. ржЕржирзНржпрж╛ржирзНржп рж╣рзЗрж▓рзНржкрж╛рж░ ржлрж╛ржВрж╢ржи ------

function getMainMenuKeyboard() {
    return {
        inline_keyboard: [
            [{ text: "тЬЕ ржирждрзБржи ржХрж╛ржЬ ржирж┐ржи (Get Task)", callback_data: "/get_task" }],
            [{ text: "ЁЯУК ржЖржорж╛рж░ ржХрж╛ржЬрзЗрж░ рж╣рж┐рж╕рж╛ржм (My Stats)", callback_data: "/my_stats" }]
        ]
    };
}


// ------ рзп. рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж╛рж▓рзБ ржХрж░рж╛ ------
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
    console.log(`Webhook is set to: ${webhookUrl}`);
});

// Sync function - (рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ рж╕рж┐ржЩрзНржХ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи)
// Render-ржП ржПржЯрж┐ Cron Job рж╣рж┐рж╕рзЗржмрзЗ рж╕рзЗржЯ ржХрж░рждрзЗ рж╣ржмрзЗ
async function syncHabibaToWorkSheet() {
    try {
        const { finalSheet, workSheet } = await getSheets();
        
        const sourceRows = await finalSheet.getRows();
        const destRows = await workSheet.getRows();

        const sourceEmails = {};
        sourceRows.forEach(row => {
            if (row.Email && !row.PhoneNumber) {
                sourceEmails[row.Email] = { Email: row.Email, Password: row.Password, Recovery: row.Recovery };
            }
        });

        const destEmails = new Set(destRows.map(row => row.Email));
        
        const newTasksToAdd = [];
        for (const email in sourceEmails) {
            if (!destEmails.has(email)) {
                const task = sourceEmails[email];
                newTasksToAdd.push({
                    Email: task.Email,
                    Password: task.Password,
                    Recovery: task.Recovery,
                    Phone: "",
                    Status: "Available",
                    AssignedTo: ""
                });
            }
        }

        if (newTasksToAdd.length > 0) {
            await workSheet.addRows(newTasksToAdd);
            console.log(`${newTasksToAdd.length} new tasks added.`);
        }

        // ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛рж░ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ржЯрж┐ ржЬржЯрж┐рж▓ ржПржмржВ ржЭрзБржБржХрж┐ржкрзВрж░рзНржг рж╣рждрзЗ ржкрж╛рж░рзЗ, рждрж╛ржЗ рж╕рж╛ржмржзрж╛ржирзЗ ржХрж░рждрзЗ рж╣ржмрзЗ
        // ржЖржкрж╛рждржд ржПржЯрж┐ ржирж┐рж╖рзНржХрзНрж░рж┐ржпрж╝ рж░рж╛ржЦрж╛ рж╣рж▓рзЛ ржпрж╛рждрзЗ ржХрзЛржирзЛ ржбрзЗржЯрж╛ ржнрзБрж▓ржмрж╢ржд ржорзБржЫрзЗ ржирж╛ ржпрж╛рзЯ
        console.log('Sync completed.');

    } catch (err) {
        console.error(`Error in syncHabibaToWorkSheet: ${err}`);
    }
}

// ------ ржирждрзБржи: ржЕржЯрзЛ-рж╕рж┐ржЩрзНржХ ржХрж░рж╛рж░ ржЬржирзНржп ржЧрзЛржкржи ржПржирзНржбржкрзЯрзЗржирзНржЯ ------
const SYNC_SECRET = process.env.SYNC_SECRET || 'your-very-secret-key'; // ржПржЗ ржХрзА ржЯрж┐ ржЖржорж░рж╛ ржкрж░рзЗ UptimeRobot-ржП ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржм

app.get(`/sync/${SYNC_SECRET}`, async (req, res) => {
    try {
        console.log('Sync job started by cron...');
        await syncHabibaToWorkSheet();
        res.status(200).send('Sync completed successfully.');
    } catch (error) {
        console.error('Sync job failed:', error);
        res.status(500).send('Sync failed.');
    }
});