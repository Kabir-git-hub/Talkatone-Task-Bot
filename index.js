// ======================================================================
//          ‡¶ö‡ßÇ‡ßú‡¶æ‡¶®‡ßç‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶™‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡¶° ‡¶ï‡ßã‡¶° (‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
// ======================================================================

// ------ ‡ßß. ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ------
require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');
const creds = require('./credentials.json');

// .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WORK_SHEET_ID = process.env.WORK_SHEET_ID;
const STATS_SHEET_ID = process.env.STATS_SHEET_ID;
const PORT = process.env.PORT || 3000;
const SERVER_URL = process.env.SERVER_URL;
const WORK_SHEET_NAME = "Stats"; // ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∂‡ßÄ‡¶ü‡ßá‡¶∞ ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨‡ßá‡¶∞ ‡¶Ø‡ßá ‡¶®‡¶æ‡¶Æ

// ------ ‡ß®. ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ------
const app = express();
app.use(express.json());
const bot = new TelegramBot(TOKEN);
const webhookUrl = `${SERVER_URL}/bot${TOKEN}`;
bot.setWebHook(webhookUrl);

// ‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶∂‡ßÄ‡¶ü ‡¶Ö‡¶•‡ßá‡¶®‡ßç‡¶ü‡¶ø‡¶ï‡ßá‡¶∂‡¶®
const serviceAccountAuth = new JWT({
    email: creds.client_email,
    key: creds.private_key.replace(/\\n/g, '\n'),
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

// ------ ‡ß©. ‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶∂‡ßÄ‡¶ü ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶ö‡ßÇ‡ßú‡¶æ‡¶®‡ßç‡¶§ ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶®) ------
async function getSheets() {
    // Work Sheet ‡¶è‡¶¨‡¶Ç ‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá‡¶∞ ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ
    const workDoc = new GoogleSpreadsheet(WORK_SHEET_ID, serviceAccountAuth);
    await workDoc.loadInfo();
    const workSheet = workDoc.sheetsByTitle["Sheet1"]; // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨
    const statsTab = workDoc.sheetsByTitle["Stats"];   // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨

    // User Stats ‡¶∂‡ßÄ‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ
    const statsDoc = new GoogleSpreadsheet(STATS_SHEET_ID, serviceAccountAuth);
    await statsDoc.loadInfo();
    const userStatsSheet = statsDoc.sheetsByIndex[0];
    
    // ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ
    return { workSheet, statsTab, userStatsSheet };
}


// ------ ‡ß™. Webhook ‡¶è‡¶¨‡¶Ç ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ ------
app.post(`/bot${TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

bot.on('message', (msg) => handleCommand(msg, msg.text));
bot.on('callback_query', (callbackQuery) => {
    bot.answerCallbackQuery(callbackQuery.id);
    handleCommand(callbackQuery.message, callbackQuery.data, callbackQuery.from.id, callbackQuery.message.message_id);
});

// ------ ‡ß´. ‡¶Æ‡ßÇ‡¶≤ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤‡¶æ‡¶∞ (‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡ßÅ‡¶≤) ------
async function handleCommand(msg, command, fromId, messageId) {
    const chatId = msg.chat.id;
    const userId = fromId || msg.from.id;

    try {
        const user = await findUser(userId);

        // ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ
        if (!user) {
            if (command && command.trim().length > 2 && !command.startsWith('/')) {
                await registerUser(userId, command.trim());
                bot.sendMessage(chatId, `‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶® ${command.trim()}! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`, { reply_markup: getMainMenuKeyboard() });
            } else {
                bot.sendMessage(chatId, "‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§");
            }
            return; // ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶≤‡ßá ‡¶¨‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶≤‡¶≤‡ßá ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶∂‡ßá‡¶∑
        }

        // ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶´‡ßÅ‡¶≤ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü
        if (userStates[userId] && userStates[userId].state === 'awaiting_phone') {
            await handlePhoneNumberInput(chatId, user, command, userStates[userId]);
            return; // ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶∂‡ßá‡¶∑
        }
        
        // ‡¶¨‡¶æ‡¶ü‡¶® ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶æ
        if (command === '/start') {
            bot.sendMessage(chatId, `‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, ${user.name}! ‡¶ï‡ßÄ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?`, { reply_markup: getMainMenuKeyboard() });
        } else if (command === '/get_task') {
            await handleGetTask(chatId, user);
        } else if (command === '/my_stats') {
            await updateAndShowStats(chatId, user);
        } else if (command.startsWith('submit_phone_')) {
            const taskRow = command.split('_')[2];
            userStates[userId] = { state: 'awaiting_phone', row: taskRow, messageId: messageId };
            bot.sendMessage(chatId, "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§");
        } else if (command.startsWith('reject_')) {
            const taskRow = command.split('_')[1];
            const rejectOptionsKeyboard = { inline_keyboard: [ [{ text: "üö´ Account Create Problem", callback_data: `confirm_reject_problem_${taskRow}` }], [{ text: "‚è∞ ‡¶™‡¶∞‡ßá ‡¶ï‡¶∞‡¶¨ (Do Later)", callback_data: `confirm_reject_later_${taskRow}` }], [{ text: "‚Ü©Ô∏è  ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶® (Back) ", callback_data: `back_to_task_${taskRow}`}] ] };
            bot.editMessageText("‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßá‡¶® ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?", { chat_id: chatId, message_id: messageId, reply_markup: rejectOptionsKeyboard });
        } else if (command.startsWith("confirm_reject_")) {
            const parts = command.split("_");
            const reason = parts[2];
            const taskRow = parts[3];
            const confirmationKeyboard = { inline_keyboard: [ [{ text: "‚úÖ ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å (Yes)", callback_data: `final_reject_${reason}_${taskRow}` }], [{ text: "‚ùå ‡¶®‡¶æ (No)", callback_data: `back_to_task_${taskRow}` }] ] };
            bot.editMessageText("‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§?", { chat_id: chatId, message_id: messageId, reply_markup: confirmationKeyboard });
        } else if (command.startsWith("final_reject_")) {
            const parts = command.split("_");
            const reason = parts[2];
            const taskRow = parts[3];
            await handleRejectTask(chatId, user, taskRow, reason, messageId);
        } else if (command.startsWith("back_to_task_")) {
            const taskRow = command.split("_")[3];
            await handleBackToTask(chatId, taskRow, messageId);
        }

    } catch (error) {
        console.error(`Error in handleCommand: ${error.toString()} \nStack: ${error.stack}`);
        bot.sendMessage(chatId, "‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
    }
}


// ------ ‡ß¨. ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã (‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá‡¶°) ------

async function handleGetTask(chatId, user) {
    // getSheets ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ñ‡¶® workSheet ‡¶è‡¶¨‡¶Ç statsTab ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶Ü‡¶∏‡¶õ‡ßá
    const { workSheet, statsTab } = await getSheets(); 
    
    // ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç: ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá
    if (!workSheet || !statsTab) {
        console.error("Error: Could not load 'Sheet1' or 'Stats' tab.");
        bot.sendMessage(chatId, "‡¶∂‡ßÄ‡¶ü‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§");
        return;
    }

    await workSheet.loadHeaderRow();
    const rows = await workSheet.getRows();

    const existingTask = rows.find(row => row.get('AssignedTo') === user.name && row.get('Status') === 'Assigned');
    if (existingTask) {
        bot.sendMessage(chatId, "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶æ‡¶ú ‡¶Ö‡¶∏‡¶Æ‡¶æ‡¶™‡ßç‡¶§ ‡¶∞‡ßü‡ßá‡¶õ‡ßá‡•§");
        return;
    }

    const availableTask = rows.find(row => row.get('Status') === 'Available');
    if (availableTask) {
        // Stats ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨ ‡¶•‡ßá‡¶ï‡ßá x ‡¶è‡¶¨‡¶Ç y ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶® ‡¶™‡ßú‡¶æ
        await statsTab.loadCells('A2:B2');
        const cellX = statsTab.getCell(1, 0); // A2
        const cellY = statsTab.getCell(1, 1); // B2
        
        const stats = {
            x: cellX.value || 0,
            y: cellY.value || 0
        };
        const title = `‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶æ‡¶ú (${stats.x}/${stats.y})`;

        availableTask.set('Status', 'Assigned');
        availableTask.set('AssignedTo', user.name);
        await availableTask.save();

        const taskRow = availableTask.rowNumber;
        const message = `<b>${title}</b>\n\n` +
                        `<b>Email: </b> <code>${availableTask.get('Email')}</code>\n` +
                        `<b>Password: </b> <code>${availableTask.get('Password')}</code>\n` +
                        `<b>Recovery Mail:</b> <code>${availableTask.get('Recovery Mail')}</code>\n\n` +
                        `‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§`;
        
        const keyboard = { inline_keyboard: [[{ text: "‚úÖ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®", callback_data: `submit_phone_${taskRow}` }], [{ text: "‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶® (Reject)", callback_data: `reject_${taskRow}` }]] };
        bot.sendMessage(chatId, message, { parse_mode: 'HTML', reply_markup: keyboard });
    } else {
        bot.sendMessage(chatId, "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶æ‡¶ú ‡¶®‡ßá‡¶á‡•§");
    }
}


async function handlePhoneNumberInput(chatId, user, phoneNumber, stateData) {
    const trimmedPhoneNumber = phoneNumber.trim();
    const phoneRegex = /^\(\d{3}\)\s\d{3}-\d{4}$/;

    if (!phoneRegex.test(trimmedPhoneNumber)) {
        bot.sendMessage(chatId, "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶®‡ßá‡¶á‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá `(123) 456-7890` ‡¶è‡¶á ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§");
        return;
    }

    const { row, messageId } = stateData;
    const { workSheet } = await getSheets();
    await workSheet.loadHeaderRow();
    const rows = await workSheet.getRows();
    
    // ‡¶∏‡¶æ‡¶∞‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø
    const task = rows.find(r => r.rowNumber == row);

    if (task && task.get('AssignedTo') === user.name && task.get('Status') === "Assigned") {
        task.set('PhoneNumber', trimmedPhoneNumber);
        task.set('Status', "Completed");
        await task.save();
        
        await updateUserStats(user, 1);
        delete userStates[user.id];
        
        const taskDetails = `<b>‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá (‡¶∏‡¶æ‡¶∞‡¶ø ${row}):</b>\n\n`+
                            `<b>Email:</b> <code>${task.get('Email')}</code>\n`+
                            `<b>Password:</b> <code>${task.get('Password')}</code>\n`+
                            `<b>Recovery Mail:</b> <code>${task.get('Recovery Mail')}</code>\n\n`+
                            `<b>‡¶ú‡¶Æ‡¶æ‡¶ï‡ßÉ‡¶§ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞:</b> <code>${trimmedPhoneNumber}</code>`;

        if (messageId) {
            bot.editMessageText(taskDetails, { chat_id: chatId, message_id: messageId, parse_mode: 'HTML', reply_markup: {} });
        }
        bot.sendMessage(chatId, `‚úÖ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`, { reply_markup: getMainMenuKeyboard() });
    } else {
        delete userStates[user.id];
        bot.sendMessage(chatId, "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", { reply_markup: getMainMenuKeyboard() });
    }
}}

async function handleRejectTask(chatId, user, rowToReject, reason, messageId) {
    const { workSheet } = await getSheets();
    await workSheet.loadHeaderRow();
    const rows = await workSheet.getRows();

    // ‡¶∏‡¶æ‡¶∞‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø
    const task = rows.find(r => r.rowNumber == rowToReject);

    if (task && task.get('Status') === "Assigned" && task.get('AssignedTo') === user.name) {
        let responseText = "";
        if (reason === "problem") {
            task.set('Status', "Rejected");
            await task.save();
            responseText = `‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø (‡¶∏‡¶æ‡¶∞‡¶ø ${rowToReject}) ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`;
        } else if (reason === "later") {
            task.set('Status', "Available");
            task.set('AssignedTo', "");
            await task.save();
            responseText = `‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`;
        }
        
        if (messageId) {
            bot.editMessageText(responseText, { chat_id: chatId, message_id: messageId, reply_markup: {} });
        }
        bot.sendMessage(chatId, "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡•§", { reply_markup: getMainMenuKeyboard() });
    } else {
        if (messageId) bot.editMessageText("‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡ßü‡•§", { chat_id: chatId, message_id: messageId });
    }
}

async function handleBackToTask(chatId, taskRow, messageId) {
    const { workSheet } = await getSheets();
    await workSheet.loadHeaderRow();
    const rows = await workSheet.getRows();
    const task = rows[parseInt(taskRow) - 2];

    if (task) {
        const message = `<b>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶æ‡¶ú</b>\n\n` +
                        `<b>Email: </b> <code>${task.get('Email')}</code>\n` +
                        `<b>Password: </b> <code>${task.get('Password')}</code>\n` +
                        `<b>Recovery Mail:</b> <code>${task.get('Recovery Mail')}</code>\n\n` +
                        `‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§`;
        const originalKeyboard = { 
            inline_keyboard: [ 
                [{ text: "‚úÖ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®", callback_data: `submit_phone_${taskRow}` }], 
                [{ text: "‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶® (Reject)", callback_data: `reject_${taskRow}` }] 
            ] 
        };
        bot.editMessageText(message, { chat_id: chatId, message_id: messageId, parse_mode: 'HTML', reply_markup: originalKeyboard });
    }
}

// ------ ‡ß≠. ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ------

async function findUser(userId) {
    const { userStatsSheet } = await getSheets();
    const rows = await userStatsSheet.getRows();
    const userRow = rows.find(row => String(row.get('UserID')) === String(userId));
    if (userRow) {
        return {
            row: userRow.rowNumber,
            id: userRow.get('UserID'),
            name: userRow.get('UserName'),
            total: parseInt(userRow.get('TotalCompleted')) || 0,
            daily: parseInt(userRow.get('DailyCompleted')) || 0,
            date: userRow.get('LastCompletedDate')
        };
    }
    return null;
}

async function registerUser(userId, userName) {
    const { userStatsSheet } = await getSheets();
    await userStatsSheet.addRow({
        UserID: userId,
        UserName: userName,
        TotalCompleted: 0,
        DailyCompleted: 0,
        LastCompletedDate: ""
    });
}

async function updateUserStats(user, count) {
    const { userStatsSheet } = await getSheets();
    const rows = await userStatsSheet.getRows();
    const userRow = rows.find(r => r.rowNumber == user.row);

    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    const lastDateStr = user.date ? new Date(user.date).toISOString().split('T')[0] : null;

    let dailyCount = parseInt(userRow.get('DailyCompleted')) || 0;
    if (todayStr === lastDateStr) {
        dailyCount += count;
    } else {
        dailyCount = count;
    }

    userRow.set('TotalCompleted', (parseInt(userRow.get('TotalCompleted')) || 0) + count);
    userRow.set('DailyCompleted', dailyCount);
    userRow.set('LastCompletedDate', today.toLocaleDateString('en-CA')); // YYYY-MM-DD format
    await userRow.save();
}

async function updateAndShowStats(chatId, user) {
    const latestUserInfo = await findUser(user.id);
    if (latestUserInfo) {
        const todaysCount = getTodaysCount(latestUserInfo);
        const statsMessage = `üìä *‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨, ${latestUserInfo.name}*\n\n- ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶æ‡¶ú: ${todaysCount}\n- ‡¶Æ‡ßã‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶æ‡¶ú: ${latestUserInfo.total}`;
        bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown', reply_markup: getMainMenuKeyboard() });
    } else {
        bot.sendMessage(chatId, "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§");
    }
}

function getTodaysCount(user) {
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    if (!user.date) return 0;
    const lastDateStr = new Date(user.date).toISOString().split('T')[0];
    return todayStr === lastDateStr ? user.daily : 0;
}

function getMainMenuKeyboard() {
    return {
        inline_keyboard: [
            [{ text: "‚úÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶æ‡¶ú ‡¶®‡¶ø‡¶® (Get Task)", callback_data: "/get_task" }],
            [{ text: "üìä ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ (My Stats)", callback_data: "/my_stats" }]
        ]
    };
}

// ------ ‡ßÆ. ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ------
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});